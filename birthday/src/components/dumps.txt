can be considered as a msg svg icon :

<svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth="1.5"
                stroke="currentColor"
                className="size-6"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M12 7.5h1.5m-1.5 3h1.5m-7.5 3h7.5m-7.5 3h7.5m3-9h3.375c.621 0 1.125.504 1.125 1.125V18a2.25 2.25 0 0 1-2.25 2.25M16.5 7.5V18a2.25 2.25 0 0 0 2.25 2.25M16.5 7.5V4.875c0-.621-.504-1.125-1.125-1.125H4.125C3.504 3.75 3 4.254 3 4.875V18a2.25 2.25 0 0 0 2.25 2.25h13.5M6 7.5h3v3H6v-3Z"
                />
              </svg>



<svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth="1.5"
                stroke="currentColor"
                className="size-6"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M12 7.5h1.5m-1.5 3h1.5m-7.5 3h7.5m-7.5 3h7.5m3-9h3.375c.621 0 1.125.504 1.125 1.125V18a2.25 2.25 0 0 1-2.25 2.25M16.5 7.5V18a2.25 2.25 0 0 0 2.25 2.25M16.5 7.5V4.875c0-.621-.504-1.125-1.125-1.125H4.125C3.504 3.75 3 4.254 3 4.875V18a2.25 2.25 0 0 0 2.25 2.25h13.5M6 7.5h3v3H6v-3Z"
                />
              </svg>








<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#3a6d83"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M3.32031 11.6835C3.32031 16.6541 7.34975 20.6835 12.3203 20.6835C16.1075 20.6835 19.3483 18.3443 20.6768 15.032C19.6402 15.4486 18.5059 15.6834 17.3203 15.6834C12.3497 15.6834 8.32031 11.654 8.32031 6.68342C8.32031 5.50338 8.55165 4.36259 8.96453 3.32996C5.65605 4.66028 3.32031 7.89912 3.32031 11.6835Z" stroke="#3a6d83" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>





const config = {
  distance: 50,
  glow: false,
}

// Get the serialized SVG string
const canvas = document.querySelector('canvas')
const ctx = canvas.getContext('2d')
const icon = document.querySelector('.icon')
const svgData = new XMLSerializer().serializeToString(icon)

canvas.width = window.innerWidth * window.devicePixelRatio
canvas.height = window.innerHeight * window.devicePixelRatio

// Create a new Image object
const img = new Image()

// Create a Data URI for the SVG
const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' })
const url = URL.createObjectURL(svgBlob)

// When the image loads, draw it onto the canvas
img.onload = function () {
  // ctx.drawImage(img, window.innerWidth * 0.5, window.innerHeight * 0.5, 20, 20)
  // Release the object URL since it's no longer needed
  URL.revokeObjectURL(url)
}

// Set the image source to the Data URI
img.src = url
let parts = []
let glows = []

const render = () => {
  ctx.clearRect(
    0,
    0,
    window.innerWidth * window.devicePixelRatio,
    window.innerHeight * window.devicePixelRatio
  )

  for (const glow of glows) {
    ctx.beginPath()
    // Draw the circle
    // arc(x, y, radius, startAngle, endAngle, anticlockwise)
    ctx.arc(glow.x, glow.y, glow.size * glow.scale, 0, Math.PI * 2)
    // Optional: set fill color
    ctx.fillStyle = 'hsl(265 90% 80% / 0.2)'
    // Fill the circle
    ctx.fill()
  }

  for (const part of parts) {
    ctx.save()
    ctx.globalAlpha = part.alpha
    // ctx.filter = `hue-rotate(${part.sy < 0 ? '150' : '0'}deg) brightness(${
    //   part.sy < 0 ? part.b - 0.5 : part.b
    // })`
    ctx.filter = `brightness(${part.sy < 0 ? part.b + 0.5 : part.b})`

    // const x = part.x - part.size * 0.5
    // const y = part.y - part.size * 0.5
    const x = part.x
    const y = part.y
    // Rotate after translate
    ctx.translate(x, y)

    // Rotate the canvas by the specified angle (in radians)
    ctx.rotate(part.r * (Math.PI / 180))
    ctx.scale(1, part.sy)

    ctx.drawImage(
      img,
      // part.size * -0.5,
      // part.size * -0.5,
      part.size * part.scale * -0.5,
      part.size * part.scale * -0.5,
      part.size * part.scale,
      part.size * part.scale
    )
    ctx.restore()
  }
}

let distance = 0
let lastPoint = []
const paint = ({ x, y }) => {
  const last = lastPoint
  const dist = Math.hypot(x - last[0], y - last[1])
  lastPoint = [x, y]

  if (!Number.isNaN(dist)) distance += dist

  if (config.glow) {
    const glow = {
      id: `glow--${Date.now()}`,
      size: 30,
      scale: 1,
      x,
      y,
    }
    gsap.to(glow, {
      onComplete: () => {
        glows = glows.filter((g) => g.id !== glow.id)
      },
      duration: 0.2,
      scale: 0,
    })
    glows.push(glow)
  }

  if (distance >= config.distance) {
    distance = 0

    const newPart = {
      id: Date.now(),
      x,
      y,
      sy: Math.random() > 0.5 ? 1 : -1,
      b: gsap.utils.random(0.5, 1.5),
      r: gsap.utils.random(0, 359, 1),
      hue: gsap.utils.random(0, 359, 1),
      size: gsap.utils.random(10, 40, 1),
      scale: 1,
      alpha: 1,
    }
    const spin = gsap.to(newPart, {
      sy: newPart.sy < 0 ? 1 : -1,
      duration: gsap.utils.random(0.1, 0.5),
      repeat: gsap.utils.random(0, 10, 1),
    })
    gsap.to(newPart, {
      onComplete: () => {
        spin.kill()
        parts = parts.filter((p) => p.id !== newPart.id)
      },
      duration: gsap.utils.random(0.5, 2.5),
      r: newPart.r + gsap.utils.random(-45, 45, 1),
      y: y + gsap.utils.random(50, 350, 1),
      alpha: 0,
      scale: 0,
    })
    parts.push(newPart)
  }
}
document.body.addEventListener('pointermove', paint)
gsap.ticker.add(render)















import { useEffect, useRef, useState } from 'react';
import React from 'react';
import { gsap } from 'gsap';

const FirstComponent = ({ onComplete }) => {
  const firstRef = useRef(null);

  useEffect(() => {
    gsap.fromTo(
      firstRef.current,
      { opacity: 0, y: -50 },
      {
        opacity: 1,
        y: 0,
        duration: 5,
        onComplete: onComplete, // Call when animation completes
      }
    );
  }, [onComplete]);

  return (
    <div ref={firstRef} style={{ opacity: 0 }}>
      <h1>First Component</h1>
    </div>
  );
};

const SecondComponent = () => {
  const secondRef = useRef(null);

  useEffect(() => {
    gsap.fromTo(
      secondRef.current,
      { opacity: 0, y: 50 },
      { opacity: 1, y: 0, duration: 5 }
    );
  }, []);

  return (
    <div ref={secondRef} style={{ opacity: 0 }}>
      <h1>Second Component</h1>
    </div>
  );
};

export default function App() {
  const [showSecond, setShowSecond] = useState(false);

  return (
    <div>
      {!showSecond ? (
        <FirstComponent onComplete={() => setShowSecond(true)} />
      ) : (
        <SecondComponent />
      )}
    </div>
  );
}
